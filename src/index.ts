// -- START HEADER --

// Copyright (c) benja2998. You may redistribute under the terms of the GPL-3.0-or-later.
// bat2js is a Batch to JavaScript compiler.

// -- END HEADER --

// -- START IMPORTS --

import * as fs from 'fs';
import * as path from 'path';
const { randomUUID } = require('crypto');

// -- END IMPORTS --

// Check if the provided file exists
// If it does, return the contents of the file
// If it doesn't, exit with an error

if (process.argv[2] == undefined) {
	console.log("Usage: bat2js <file>");
    process.exit(1);
}

const filePath = process.argv[2];

if (!fs.existsSync(filePath)) {
	console.error(`File not found: ${filePath}`);
	process.exit(1);
}

// Read the file contents

const fileContents = fs.readFileSync(filePath, 'utf8');

let compiledContents = `#!/usr/bin/env node

// DO NOT MODIFY.
// This file is automatically generated by bat2js.
// To modify the contents, edit the original .bat file and run bat2js again.
// Compiled from: ${filePath}

const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');

// -- START COMPILED CODE --

`;

// Check if the file is a .bat file

if (path.extname(filePath).toLowerCase() !== '.bat') {
	console.error(`File is not a .bat file: ${filePath}`);
	process.exit(1);
}

// Define tokens

const tokens = [
	'@echo',
	'echo',
	'exit',
	'pause'
];

// Define a function to tokenize the file contents

function tokenize(contents: string): string[] {
	const lines = contents.split('\n');
	const result: string[] = [];

	for (const line of lines) {
		const trimmedLine = line.trim();
		if (trimmedLine.length > 0) {
			result.push(trimmedLine);
		}
	}

	return result;
}

// Tokenize the file contents
// The first word of every line is a token, the rest is the content of the token
//
// Example:
//
// '@echo off' becomes ['@echo', 'off']
// 'echo Hello World' becomes ['echo', 'Hello World']

const tokenizedContents = tokenize(fileContents).map(line => {
	const parts = line.split(' ');
	const token = parts[0];
	const content = parts.slice(1).join(' ');
	return [token, content];
});

console.time("Compilation Time");

// Compile the tokenized contents

tokenizedContents.forEach(([token, content]) => {
	console.log(`Token: ${token}, Content: ${content}`);
	console.log(`Compiling ${token} with contents: ${content}...`);

	// Compile the token
	
	switch (token) {
		case '@echo':
			// Silent echo, ignore
			break;
		case 'echo':
			// Compile echo command
			compiledContents += `console.log("${content}");\n`;
			break;
		case 'exit':
			// Compile exit command
			compiledContents += `process.exit(0);\n`;
			break;
		case 'pause':
			// I haven't found a way to properly pause execution in Node.js like in Batch scripts, so don't do anything
			break;
		default:
			console.error(`Unknown token: ${token}`);
			process.exit(1);
	}

});

console.timeEnd("Compilation Time");

// Get the file name without the extension

const fileName = path.parse(filePath).name;

// Write the compiled contents to a new file with the same name but .js extension

const outputFilePath = path.join(path.dirname(filePath), `${fileName}.js`);

fs.writeFileSync(outputFilePath, compiledContents, 'utf8');
